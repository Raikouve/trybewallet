{"ast":null,"code":"var _jsxFileName = \"/home/toni/sd-014-b-project-trybewallet/src/pages/Wallet.jsx\";\n\n/* eslint-disable max-lines-per-function */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, sendExpensesInfo } from '../actions';\nimport Input from '../components/Input';\nimport Select from '../components/Select';\nimport { payMethods, tags } from '../helpers';\nimport getCurrencyInfo from '../services/currencyAPI';\nimport Header from '../components/Header';\nimport '../styles/wallet.css';\nimport Table from '../components/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Wallet extends Component {\n  constructor() {\n    super();\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação'\n    };\n  }\n\n  componentDidMount() {\n    const {\n      fetchCurrenciesToProps\n    } = this.props;\n    fetchCurrenciesToProps();\n  }\n\n  handleInputChange(_ref) {\n    let {\n      target: {\n        name,\n        value\n      }\n    } = _ref;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async handleButtonClick() {\n    const {\n      expenses,\n      sendExpensesToProps\n    } = this.props;\n    const response = await getCurrencyInfo();\n    sendExpensesToProps({\n      id: expenses.length,\n      ...this.state,\n      exchangeRates: response\n    });\n  }\n\n  render() {\n    const {\n      props: {\n        userEmail,\n        walletCurrencies,\n        expenses\n      },\n      state: {\n        value,\n        description,\n        currency,\n        method,\n        tag\n      },\n      handleInputChange,\n      handleButtonClick\n    } = this;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"w-full h-full bg-gray-800 wallet\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        userEmail: userEmail,\n        expenses: expenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex w-full h-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"w-80 h-5/6 flex flex-col justify-around items-center px-4 py-4 bg-gray-50 rounded wallet-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-xl\",\n            children: \"Insira sua despesa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            name: \"value\",\n            value: value,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            name: \"description\",\n            value: description,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"currency\",\n            value: currency,\n            options: walletCurrencies.filter(optCurrency => optCurrency !== 'USDT'),\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"method\",\n            value: method,\n            options: payMethods,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"tag\",\n            value: tag,\n            options: tags,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"adicionar despesa\",\n            type: \"button\",\n            onClick: handleButtonClick,\n            className: \"px-4 py-2 bg-gray-700 text-gray-50 rounded hover:bg-gray-800 transition duration-300\",\n            children: \"Adicionar despesa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nWallet.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fetchCurrenciesToProps: PropTypes.func.isRequired,\n  sendExpensesToProps: PropTypes.func.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  walletCurrencies: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nconst mapStateToProps = state => ({\n  userEmail: state.user.email,\n  walletCurrencies: state.wallet.currencies,\n  expenses: state.wallet.expenses\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrenciesToProps: () => dispatch(fetchCurrencies()),\n  sendExpensesToProps: expenses => dispatch(sendExpensesInfo(expenses))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);","map":{"version":3,"sources":["/home/toni/sd-014-b-project-trybewallet/src/pages/Wallet.jsx"],"names":["React","Component","PropTypes","connect","fetchCurrencies","sendExpensesInfo","Input","Select","payMethods","tags","getCurrencyInfo","Header","Table","Wallet","constructor","handleInputChange","bind","handleButtonClick","state","value","description","currency","method","tag","componentDidMount","fetchCurrenciesToProps","props","target","name","setState","expenses","sendExpensesToProps","response","id","length","exchangeRates","render","userEmail","walletCurrencies","filter","optCurrency","propTypes","arrayOf","shape","isRequired","func","string","mapStateToProps","user","email","wallet","currencies","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["/* eslint-disable max-lines-per-function */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, sendExpensesInfo } from '../actions';\nimport Input from '../components/Input';\nimport Select from '../components/Select';\nimport { payMethods, tags } from '../helpers';\nimport getCurrencyInfo from '../services/currencyAPI';\nimport Header from '../components/Header';\nimport '../styles/wallet.css';\nimport Table from '../components/Table';\n\nclass Wallet extends Component {\n  constructor() {\n    super();\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n  }\n\n  componentDidMount() {\n    const { fetchCurrenciesToProps } = this.props;\n    fetchCurrenciesToProps();\n  }\n\n  handleInputChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async handleButtonClick() {\n    const { expenses, sendExpensesToProps } = this.props;\n    const response = await getCurrencyInfo();\n    sendExpensesToProps({ id: expenses.length, ...this.state, exchangeRates: response });\n  }\n\n  render() {\n    const { props: { userEmail, walletCurrencies, expenses }, state: {\n      value, description, currency, method, tag },\n    handleInputChange, handleButtonClick } = this;\n    return (\n      <section\n        className=\"w-full h-full bg-gray-800 wallet\"\n      >\n        <Header userEmail={ userEmail } expenses={ expenses } />\n        <div className=\"flex w-full h-full\">\n          <form\n            className=\"w-80 h-5/6 flex flex-col justify-around\n            items-center px-4 py-4 bg-gray-50 rounded wallet-form\"\n          >\n            <h3 className=\"text-xl\">Insira sua despesa</h3>\n            <Input\n              type=\"text\"\n              name=\"value\"\n              value={ value }\n              onChange={ handleInputChange }\n            />\n            <Input\n              type=\"text\"\n              name=\"description\"\n              value={ description }\n              onChange={ handleInputChange }\n            />\n            <Select\n              name=\"currency\"\n              value={ currency }\n              options={ walletCurrencies.filter((optCurrency) => optCurrency !== 'USDT') }\n              onChange={ handleInputChange }\n            />\n            <Select\n              name=\"method\"\n              value={ method }\n              options={ payMethods }\n              onChange={ handleInputChange }\n            />\n            <Select\n              name=\"tag\"\n              value={ tag }\n              options={ tags }\n              onChange={ handleInputChange }\n            />\n            <button\n              name=\"adicionar despesa\"\n              type=\"button\"\n              onClick={ handleButtonClick }\n              className=\"px-4 py-2 bg-gray-700 text-gray-50 rounded\n              hover:bg-gray-800 transition duration-300\"\n            >\n              Adicionar despesa\n            </button>\n          </form>\n          <Table />\n        </div>\n      </section>\n    );\n  }\n}\n\nWallet.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fetchCurrenciesToProps: PropTypes.func.isRequired,\n  sendExpensesToProps: PropTypes.func.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  walletCurrencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  walletCurrencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrenciesToProps: () => dispatch(fetchCurrencies()),\n  sendExpensesToProps: (expenses) => dispatch(sendExpensesInfo(expenses)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n"]},"metadata":{},"sourceType":"module"}