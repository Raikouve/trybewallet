{"ast":null,"code":"var _jsxFileName = \"/home/toni/sd-014-b-project-trybewallet/src/pages/Wallet.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, fetchExchangeRates, sendExpansesInfo } from '../actions';\nimport Input from '../components/Input';\nimport Select from '../components/Select';\n\nclass Wallet extends Component {\n  constructor() {\n    super();\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.state = {\n      // currentExpense: [],\n      value: '',\n      description: '',\n      currency: '',\n      payMethod: '',\n      tag: '',\n      actualCurrency: 'BRL'\n    };\n  }\n\n  componentDidMount() {\n    const {\n      fetchCurrenciesToProps\n    } = this.props;\n    fetchCurrenciesToProps();\n  }\n\n  handleInputChange({\n    target: {\n      name,\n      value\n    }\n  }) {\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleButtonClick() {\n    const {\n      fetchExchangeRatesToProps,\n      sendExpansesToProps\n    } = this.props;\n    fetchExchangeRatesToProps();\n    sendExpansesToProps(this.state);\n  }\n\n  render() {\n    const {\n      props: {\n        userEmail,\n        walletCurrencies\n      },\n      state: {\n        totalExpenses,\n        actualCurrency,\n        value,\n        description,\n        currency,\n        payMethod,\n        tag\n      },\n      handleInputChange,\n      handleButtonClick\n    } = this;\n    const payMethods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"email-field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, userEmail), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"total-field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, totalExpenses), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"header-currency-field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, actualCurrency)), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"valor\",\n      value: value,\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"description\",\n      value: description,\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      name: \"moeda\",\n      value: currency,\n      options: walletCurrencies.filter(optCurrency => optCurrency !== 'USDT'),\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      name: \"m\\xE9todo de pagamento\",\n      value: payMethod,\n      options: payMethods,\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      name: \"tag\",\n      value: tag,\n      options: tags,\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      name: \"adicionar despesa\",\n      type: \"button\",\n      onClick: handleButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, \"Adicionar despesa\")));\n  }\n\n}\n\nWallet.propTypes = {\n  fetchCurrenciesToProps: PropTypes.func.isRequired,\n  fetchExchangeRatesToProps: PropTypes.func.isRequired,\n  sendExpansesToProps: PropTypes.func.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  walletCurrencies: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nconst mapStateToProps = state => ({\n  userEmail: state.user.email,\n  walletCurrencies: state.wallet.currencies\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrenciesToProps: () => dispatch(fetchCurrencies()),\n  fetchExchangeRatesToProps: () => dispatch(fetchExchangeRates()),\n  sendExpansesToProps: expanses => dispatch(sendExpansesInfo(expanses))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);","map":{"version":3,"sources":["/home/toni/sd-014-b-project-trybewallet/src/pages/Wallet.jsx"],"names":["React","Component","PropTypes","connect","fetchCurrencies","fetchExchangeRates","sendExpansesInfo","Input","Select","Wallet","constructor","handleInputChange","bind","handleButtonClick","state","value","description","currency","payMethod","tag","actualCurrency","componentDidMount","fetchCurrenciesToProps","props","target","name","setState","fetchExchangeRatesToProps","sendExpansesToProps","render","userEmail","walletCurrencies","totalExpenses","payMethods","tags","filter","optCurrency","propTypes","func","isRequired","string","arrayOf","mapStateToProps","user","email","wallet","currencies","mapDispatchToProps","dispatch","expanses"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, fetchExchangeRates, sendExpansesInfo } from '../actions';\nimport Input from '../components/Input';\nimport Select from '../components/Select';\n\nclass Wallet extends Component {\n  constructor() {\n    super();\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n\n    this.state = {\n      // currentExpense: [],\n      value: '',\n      description: '',\n      currency: '',\n      payMethod: '',\n      tag: '',\n      actualCurrency: 'BRL',\n    };\n  }\n\n  componentDidMount() {\n    const { fetchCurrenciesToProps } = this.props;\n    fetchCurrenciesToProps();\n  }\n\n  handleInputChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleButtonClick() {\n    const { fetchExchangeRatesToProps, sendExpansesToProps } = this.props;\n    fetchExchangeRatesToProps();\n    sendExpansesToProps(this.state);\n  }\n\n  render() {\n    const { props: { userEmail, walletCurrencies }, state: {\n      totalExpenses, actualCurrency, value, description, currency, payMethod, tag },\n    handleInputChange, handleButtonClick } = this;\n    const payMethods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return (\n      <section>\n        <header>\n          <span data-testid=\"email-field\">{ userEmail }</span>\n          <span data-testid=\"total-field\">{ totalExpenses }</span>\n          <span data-testid=\"header-currency-field\">{ actualCurrency }</span>\n        </header>\n        <form>\n          <Input\n            type=\"text\"\n            name=\"valor\"\n            value={ value }\n            onChange={ handleInputChange }\n          />\n          <Input\n            type=\"text\"\n            name=\"description\"\n            value={ description }\n            onChange={ handleInputChange }\n          />\n          <Select\n            name=\"moeda\"\n            value={ currency }\n            options={ walletCurrencies.filter((optCurrency) => optCurrency !== 'USDT') }\n            onChange={ handleInputChange }\n          />\n          <Select\n            name=\"método de pagamento\"\n            value={ payMethod }\n            options={ payMethods }\n            onChange={ handleInputChange }\n          />\n          <Select\n            name=\"tag\"\n            value={ tag }\n            options={ tags }\n            onChange={ handleInputChange }\n          />\n          <button name=\"adicionar despesa\" type=\"button\" onClick={ handleButtonClick }>Adicionar despesa</button>\n        </form>\n      </section>\n    );\n  }\n}\n\nWallet.propTypes = {\n  fetchCurrenciesToProps: PropTypes.func.isRequired,\n  fetchExchangeRatesToProps: PropTypes.func.isRequired,\n  sendExpansesToProps: PropTypes.func.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  walletCurrencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  walletCurrencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrenciesToProps: () => dispatch(fetchCurrencies()),\n  fetchExchangeRatesToProps: () => dispatch(fetchExchangeRates()),\n  sendExpansesToProps: (expanses) => dispatch(sendExpansesInfo(expanses)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n"]},"metadata":{},"sourceType":"module"}