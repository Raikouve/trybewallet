{"ast":null,"code":"var _jsxFileName = \"/home/toni/sd-014-b-project-trybewallet/src/pages/Wallet.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies } from '../actions';\nimport Input from '../components/Input';\nimport Select from '../components/Select';\n\nclass Wallet extends Component {\n  constructor() {\n    super();\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.state = {\n      totalExpenses: 0,\n      currentExpense: [],\n      valor: '',\n      descricao: '',\n      moeda: '',\n      payMethod: '',\n      tag: '',\n      actualCurrency: 'BRL'\n    };\n  }\n\n  componentDidMount() {\n    const {\n      fetchCurrenciesToProps\n    } = this.props;\n    fetchCurrenciesToProps();\n  }\n\n  handleInputChange({\n    target: {\n      name\n    }\n  }) {\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const {\n      userEmail,\n      walletCurrencies\n    } = this.props;\n    const payMethods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    const {\n      totalExpenses,\n      currentExpense,\n      actualCurrency,\n      valor,\n      descricao,\n      moeda,\n      payMethod,\n      tag\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"email-field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, userEmail), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"total-field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, totalExpenses), /*#__PURE__*/React.createElement(\"span\", {\n      \"data-testid\": \"header-currency-field\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, actualCurrency)), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"valor\",\n      labelText: \"Valor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"descricao\",\n      labelText: \"Descri\\xE7\\xE3o\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      name: \"moeda\",\n      labelText: \"Moeda\",\n      options: walletCurrencies.filter(currency => currency !== 'USDT'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      name: \"payMethod\",\n      labelText: \"M\\xE9todo de pagamento\",\n      options: payMethods,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      name: \"tag\",\n      labelText: \"Tag\",\n      options: tags,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, \"Adicionar despesa\")));\n  }\n\n}\n\nWallet.propTypes = {\n  fetchCurrenciesToProps: PropTypes.func.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  walletCurrencies: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nconst mapStateToProps = state => ({\n  userEmail: state.user.email,\n  walletCurrencies: state.wallet.currencies\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrenciesToProps: () => dispatch(fetchCurrencies())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);","map":{"version":3,"sources":["/home/toni/sd-014-b-project-trybewallet/src/pages/Wallet.js"],"names":["React","Component","PropTypes","connect","fetchCurrencies","Input","Select","Wallet","constructor","handleInputChange","bind","state","totalExpenses","currentExpense","valor","descricao","moeda","payMethod","tag","actualCurrency","componentDidMount","fetchCurrenciesToProps","props","target","name","setState","value","render","userEmail","walletCurrencies","payMethods","tags","filter","currency","propTypes","func","isRequired","string","arrayOf","mapStateToProps","user","email","wallet","currencies","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies } from '../actions';\nimport Input from '../components/Input';\nimport Select from '../components/Select';\n\nclass Wallet extends Component {\n  constructor() {\n    super();\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n\n    this.state = {\n      totalExpenses: 0,\n      currentExpense: [],\n      valor: '',\n      descricao: '',\n      moeda: '',\n      payMethod: '',\n      tag: '',\n      actualCurrency: 'BRL',\n    };\n  }\n\n  componentDidMount() {\n    const { fetchCurrenciesToProps } = this.props;\n    fetchCurrenciesToProps();\n  }\n\n  handleInputChange({ target: { name } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { userEmail, walletCurrencies } = this.props;\n    const payMethods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    const {\n      totalExpenses,\n      currentExpense,\n      actualCurrency,\n      valor, descricao, moeda, payMethod, tag,\n    } = this.state;\n    return (\n      <section>\n        <header>\n          <span data-testid=\"email-field\">{ userEmail }</span>\n          <span data-testid=\"total-field\">{ totalExpenses }</span>\n          <span data-testid=\"header-currency-field\">{ actualCurrency }</span>\n        </header>\n        <form>\n          <Input\n            type=\"text\"\n            name=\"valor\"\n            labelText=\"Valor\"\n          />\n          <Input\n            type=\"text\"\n            name=\"descricao\"\n            labelText=\"Descrição\"\n          />\n          <Select\n            name=\"moeda\"\n            labelText=\"Moeda\"\n            options={ walletCurrencies.filter((currency) => currency !== 'USDT') }\n          />\n          <Select\n            name=\"payMethod\"\n            labelText=\"Método de pagamento\"\n            options={ payMethods }\n          />\n          <Select\n            name=\"tag\"\n            labelText=\"Tag\"\n            options={ tags }\n          />\n          <button type=\"button\">Adicionar despesa</button>\n        </form>\n      </section>\n    );\n  }\n}\n\nWallet.propTypes = {\n  fetchCurrenciesToProps: PropTypes.func.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  walletCurrencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  walletCurrencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrenciesToProps: () => dispatch(fetchCurrencies()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n"]},"metadata":{},"sourceType":"module"}