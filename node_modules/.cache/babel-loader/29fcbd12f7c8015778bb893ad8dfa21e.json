{"ast":null,"code":"var _jsxFileName = \"/home/toni/sd-014-b-project-trybewallet/src/pages/Wallet.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, sendExpensesInfo, setTotalExpenses } from '../actions';\nimport Input from '../components/Input';\nimport Select from '../components/Select';\nimport { payMethods, tags } from '../helpers';\nimport getCurrencyInfo from '../services/currencyAPI';\n\nclass Wallet extends Component {\n  constructor() {\n    super();\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.state = {\n      totalExpenses: 0,\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: ''\n    };\n  }\n\n  componentDidMount() {\n    const {\n      fetchCurrenciesToProps\n    } = this.props;\n    fetchCurrenciesToProps();\n  }\n\n  handleInputChange({\n    target: {\n      name,\n      value\n    }\n  }) {\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async handleButtonClick() {\n    const {\n      expenses,\n      sendExpensesToProps,\n      addTotalExpenses\n    } = this.props;\n    const {\n      value\n    } = this.state;\n    const response = await getCurrencyInfo();\n    sendExpensesToProps({ ...this.state,\n      id: expenses.length,\n      exchangeRates: response\n    });\n    addTotalExpenses(value);\n  } // eslint-disable-next-line max-lines-per-function\n\n\n  render() {\n    const {\n      props: {\n        userEmail,\n        walletCurrencies,\n        expenses\n      },\n      state: {\n        value,\n        description,\n        currency,\n        method,\n        tag\n      },\n      handleInputChange,\n      handleButtonClick\n    } = this;\n    return /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"value\",\n      value: value,\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"description\",\n      value: description,\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      name: \"currency\",\n      value: currency,\n      options: walletCurrencies.filter(optCurrency => optCurrency !== 'USDT'),\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      name: \"method\",\n      value: method,\n      options: payMethods,\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      name: \"tag\",\n      value: tag,\n      options: tags,\n      onChange: handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      name: \"adicionar despesa\",\n      type: \"button\",\n      onClick: handleButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, \"Adicionar despesa\")));\n  }\n\n}\n\nWallet.propTypes = {\n  addTotalExpenses: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fetchCurrenciesToProps: PropTypes.func.isRequired,\n  sendExpensesToProps: PropTypes.func.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  walletCurrencies: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nconst mapStateToProps = state => ({\n  userEmail: state.user.email,\n  walletCurrencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  totalExpenses: state.wallet.totalExpenses\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrenciesToProps: () => dispatch(fetchCurrencies()),\n  sendExpensesToProps: expenses => dispatch(sendExpensesInfo(expenses)),\n  addTotalExpenses: totalExpenses => dispatch(setTotalExpenses(totalExpenses))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);","map":{"version":3,"sources":["/home/toni/sd-014-b-project-trybewallet/src/pages/Wallet.jsx"],"names":["React","Component","PropTypes","connect","fetchCurrencies","sendExpensesInfo","setTotalExpenses","Input","Select","payMethods","tags","getCurrencyInfo","Wallet","constructor","handleInputChange","bind","handleButtonClick","state","totalExpenses","value","description","currency","method","tag","componentDidMount","fetchCurrenciesToProps","props","target","name","setState","expenses","sendExpensesToProps","addTotalExpenses","response","id","length","exchangeRates","render","userEmail","walletCurrencies","filter","optCurrency","propTypes","func","isRequired","arrayOf","shape","string","mapStateToProps","user","email","wallet","currencies","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, sendExpensesInfo, setTotalExpenses } from '../actions';\nimport Input from '../components/Input';\nimport Select from '../components/Select';\nimport { payMethods, tags } from '../helpers';\nimport getCurrencyInfo from '../services/currencyAPI';\n\nclass Wallet extends Component {\n  constructor() {\n    super();\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n\n    this.state = {\n      totalExpenses: 0,\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n    };\n  }\n\n  componentDidMount() {\n    const { fetchCurrenciesToProps } = this.props;\n    fetchCurrenciesToProps();\n  }\n\n  handleInputChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async handleButtonClick() {\n    const { expenses, sendExpensesToProps, addTotalExpenses } = this.props;\n    const { value } = this.state;\n    const response = await getCurrencyInfo();\n    sendExpensesToProps({ ...this.state, id: expenses.length, exchangeRates: response });\n    addTotalExpenses(value);\n  }\n\n  // eslint-disable-next-line max-lines-per-function\n  render() {\n    const { props: { userEmail, walletCurrencies, expenses }, state: {\n      value, description, currency, method, tag },\n    handleInputChange, handleButtonClick } = this;\n    return (\n      <section>\n        \n        <form>\n          <Input\n            type=\"text\"\n            name=\"value\"\n            value={ value }\n            onChange={ handleInputChange }\n          />\n          <Input\n            type=\"text\"\n            name=\"description\"\n            value={ description }\n            onChange={ handleInputChange }\n          />\n          <Select\n            name=\"currency\"\n            value={ currency }\n            options={ walletCurrencies.filter((optCurrency) => optCurrency !== 'USDT') }\n            onChange={ handleInputChange }\n          />\n          <Select\n            name=\"method\"\n            value={ method }\n            options={ payMethods }\n            onChange={ handleInputChange }\n          />\n          <Select\n            name=\"tag\"\n            value={ tag }\n            options={ tags }\n            onChange={ handleInputChange }\n          />\n          <button name=\"adicionar despesa\" type=\"button\" onClick={ handleButtonClick }>\n            Adicionar despesa\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nWallet.propTypes = {\n  addTotalExpenses: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fetchCurrenciesToProps: PropTypes.func.isRequired,\n  sendExpensesToProps: PropTypes.func.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  walletCurrencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  walletCurrencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  totalExpenses: state.wallet.totalExpenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrenciesToProps: () => dispatch(fetchCurrencies()),\n  sendExpensesToProps: (expenses) => dispatch(sendExpensesInfo(expenses)),\n  addTotalExpenses: (totalExpenses) => dispatch(setTotalExpenses(totalExpenses)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n"]},"metadata":{},"sourceType":"module"}