{"ast":null,"code":"var _jsxFileName = \"/home/toni/sd-014-b-project-trybewallet/src/components/Select.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport labelTranslate from '../helpers/translate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Select extends Component {\n  constructor() {\n    super();\n    this.capitalize = this.capitalize.bind(this);\n  } // Função vista em: https://stackoverflow.com/questions/1026069/how-do-i-make-the-first-letter-of-a-string-uppercase-in-javascript\n\n\n  capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  render() {\n    const {\n      name,\n      options,\n      onChange\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      children: [labelTranslate(name), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: name,\n        id: name,\n        onChange: onChange,\n        defaultValue: options,\n        children: options.map((oneOption, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: oneOption,\n          children: oneOption\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nSelect.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/toni/sd-014-b-project-trybewallet/src/components/Select.jsx"],"names":["React","Component","PropTypes","labelTranslate","Select","constructor","capitalize","bind","string","charAt","toUpperCase","slice","render","name","options","onChange","props","map","oneOption","index","propTypes","arrayOf","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;;AAEA,eAAe,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAC5CI,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACD,GAL2C,CAO5C;;;AACAD,EAAAA,UAAU,CAACE,MAAD,EAAS;AACjB,WAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAxC;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAA8B,KAAKC,KAAzC;AACA,wBACE;AAAO,MAAA,OAAO,EAAGH,IAAjB;AAAA,iBACIV,cAAc,CAACU,IAAD,CADlB,eAEE;AACE,QAAA,IAAI,EAAGA,IADT;AAEE,QAAA,EAAE,EAAGA,IAFP;AAGE,QAAA,QAAQ,EAAGE,QAHb;AAIE,QAAA,YAAY,EAAGD,OAJjB;AAAA,kBAMIA,OAAO,CAACG,GAAR,CAAY,CAACC,SAAD,EAAYC,KAAZ,kBACZ;AAEE,UAAA,KAAK,EAAGD,SAFV;AAAA,oBAIIA;AAJJ,WACQC,KADR;AAAA;AAAA;AAAA;AAAA,gBADA;AANJ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AAjC2C;AAoC9Cf,MAAM,CAACgB,SAAP,GAAmB;AACjBN,EAAAA,OAAO,EAAEZ,SAAS,CAACmB,OAAV,CAAkBnB,SAAS,CAACM,MAA5B,EAAoCc,UAD5B;AAEjBT,EAAAA,IAAI,EAAEX,SAAS,CAACM,MAAV,CAAiBc,UAFN;AAGjBP,EAAAA,QAAQ,EAAEb,SAAS,CAACqB,IAAV,CAAeD;AAHR,CAAnB","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport labelTranslate from '../helpers/translate';\n\nexport default class Select extends Component {\n  constructor() {\n    super();\n\n    this.capitalize = this.capitalize.bind(this);\n  }\n\n  // Função vista em: https://stackoverflow.com/questions/1026069/how-do-i-make-the-first-letter-of-a-string-uppercase-in-javascript\n  capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  render() {\n    const { name, options, onChange } = this.props;\n    return (\n      <label htmlFor={ name }>\n        { labelTranslate(name) }\n        <select\n          name={ name }\n          id={ name }\n          onChange={ onChange }\n          defaultValue={ options }\n        >\n          { options.map((oneOption, index) => (\n            <option\n              key={ index }\n              value={ oneOption }\n            >\n              { oneOption }\n            </option>)) }\n        </select>\n      </label>\n    );\n  }\n}\n\nSelect.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}