{"ast":null,"code":"var _jsxFileName = \"/home/toni/sd-014-b-project-trybewallet/src/pages/Wallet.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, sendExpensesInfo } from '../actions';\nimport Input from '../components/Input';\nimport Select from '../components/Select';\nimport { payMethods, tags } from '../helpers';\nimport getCurrencyInfo from '../services/currencyAPI';\nimport Header from '../components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Wallet extends Component {\n  constructor() {\n    super();\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n    this.state = {\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: ''\n    };\n  }\n\n  componentDidMount() {\n    const {\n      fetchCurrenciesToProps\n    } = this.props;\n    fetchCurrenciesToProps();\n  }\n\n  handleInputChange(_ref) {\n    let {\n      target: {\n        name,\n        value\n      }\n    } = _ref;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async handleButtonClick() {\n    const {\n      expenses,\n      sendExpensesToProps\n    } = this.props;\n    const response = await getCurrencyInfo();\n    sendExpensesToProps({\n      id: expenses.length,\n      ...this.state,\n      exchangeRates: response\n    });\n  }\n\n  render() {\n    const {\n      props: {\n        userEmail,\n        walletCurrencies,\n        expenses\n      },\n      state: {\n        value,\n        description,\n        currency,\n        method,\n        tag\n      },\n      handleInputChange,\n      handleButtonClick\n    } = this;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"w- bg-gradient-to-t from-gray-200 via-gray-100 to-gray-50\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        userEmail: userEmail,\n        expenses: expenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          name: \"value\",\n          value: value,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          name: \"description\",\n          value: description,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"currency\",\n          value: currency,\n          options: walletCurrencies.filter(optCurrency => optCurrency !== 'USDT'),\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"method\",\n          value: method,\n          options: payMethods,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"tag\",\n          value: tag,\n          options: tags,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          name: \"adicionar despesa\",\n          type: \"button\",\n          onClick: handleButtonClick,\n          children: \"Adicionar despesa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nWallet.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fetchCurrenciesToProps: PropTypes.func.isRequired,\n  sendExpensesToProps: PropTypes.func.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  walletCurrencies: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nconst mapStateToProps = state => ({\n  userEmail: state.user.email,\n  walletCurrencies: state.wallet.currencies,\n  expenses: state.wallet.expenses\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrenciesToProps: () => dispatch(fetchCurrencies()),\n  sendExpensesToProps: expenses => dispatch(sendExpensesInfo(expenses))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);","map":{"version":3,"sources":["/home/toni/sd-014-b-project-trybewallet/src/pages/Wallet.jsx"],"names":["React","Component","PropTypes","connect","fetchCurrencies","sendExpensesInfo","Input","Select","payMethods","tags","getCurrencyInfo","Header","Wallet","constructor","handleInputChange","bind","handleButtonClick","state","value","description","currency","method","tag","componentDidMount","fetchCurrenciesToProps","props","target","name","setState","expenses","sendExpensesToProps","response","id","length","exchangeRates","render","userEmail","walletCurrencies","filter","optCurrency","propTypes","arrayOf","shape","isRequired","func","string","mapStateToProps","user","email","wallet","currencies","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,YAAlD;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,YAAjC;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,MAAMC,MAAN,SAAqBX,SAArB,CAA+B;AAC7BY,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AAEA,SAAKE,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,WAAW,EAAE,EAFF;AAGXC,MAAAA,QAAQ,EAAE,EAHC;AAIXC,MAAAA,MAAM,EAAE,EAJG;AAKXC,MAAAA,GAAG,EAAE;AALM,KAAb;AAOD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAA6B,KAAKC,KAAxC;AACAD,IAAAA,sBAAsB;AACvB;;AAEDV,EAAAA,iBAAiB,OAA8B;AAAA,QAA7B;AAAEY,MAAAA,MAAM,EAAE;AAAEC,QAAAA,IAAF;AAAQT,QAAAA;AAAR;AAAV,KAA6B;AAC7C,SAAKU,QAAL,CAAc;AACZ,OAACD,IAAD,GAAQT;AADI,KAAd;AAGD;;AAEsB,QAAjBF,iBAAiB,GAAG;AACxB,UAAM;AAAEa,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAoC,KAAKL,KAA/C;AACA,UAAMM,QAAQ,GAAG,MAAMrB,eAAe,EAAtC;AACAoB,IAAAA,mBAAmB,CAAC;AAAEE,MAAAA,EAAE,EAAEH,QAAQ,CAACI,MAAf;AAAuB,SAAG,KAAKhB,KAA/B;AAAsCiB,MAAAA,aAAa,EAAEH;AAArD,KAAD,CAAnB;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEV,MAAAA,KAAK,EAAE;AAAEW,QAAAA,SAAF;AAAaC,QAAAA,gBAAb;AAA+BR,QAAAA;AAA/B,OAAT;AAAoDZ,MAAAA,KAAK,EAAE;AAC/DC,QAAAA,KAD+D;AACxDC,QAAAA,WADwD;AAC3CC,QAAAA,QAD2C;AACjCC,QAAAA,MADiC;AACzBC,QAAAA;AADyB,OAA3D;AAENR,MAAAA,iBAFM;AAEaE,MAAAA;AAFb,QAEmC,IAFzC;AAGA,wBACE;AAAS,MAAA,SAAS,EAAC,2DAAnB;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,SAAS,EAAGoB,SAApB;AAAgC,QAAA,QAAQ,EAAGP;AAA3C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCACE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,KAAK,EAAGX,KAHV;AAIE,UAAA,QAAQ,EAAGJ;AAJb;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,QAAC,KAAD;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,aAFP;AAGE,UAAA,KAAK,EAAGK,WAHV;AAIE,UAAA,QAAQ,EAAGL;AAJb;AAAA;AAAA;AAAA;AAAA,gBAPF,eAaE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,KAAK,EAAGM,QAFV;AAGE,UAAA,OAAO,EAAGiB,gBAAgB,CAACC,MAAjB,CAAyBC,WAAD,IAAiBA,WAAW,KAAK,MAAzD,CAHZ;AAIE,UAAA,QAAQ,EAAGzB;AAJb;AAAA;AAAA;AAAA;AAAA,gBAbF,eAmBE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,KAAK,EAAGO,MAFV;AAGE,UAAA,OAAO,EAAGb,UAHZ;AAIE,UAAA,QAAQ,EAAGM;AAJb;AAAA;AAAA;AAAA;AAAA,gBAnBF,eAyBE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,KADP;AAEE,UAAA,KAAK,EAAGQ,GAFV;AAGE,UAAA,OAAO,EAAGb,IAHZ;AAIE,UAAA,QAAQ,EAAGK;AAJb;AAAA;AAAA;AAAA;AAAA,gBAzBF,eA+BE;AAAQ,UAAA,IAAI,EAAC,mBAAb;AAAiC,UAAA,IAAI,EAAC,QAAtC;AAA+C,UAAA,OAAO,EAAGE,iBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAwCD;;AA7E4B;;AAgF/BJ,MAAM,CAAC4B,SAAP,GAAmB;AACjBX,EAAAA,QAAQ,EAAE3B,SAAS,CAACuC,OAAV,CAAkBvC,SAAS,CAACwC,KAAV,CAAgB,EAAhB,CAAlB,EAAuCC,UADhC;AAEjBnB,EAAAA,sBAAsB,EAAEtB,SAAS,CAAC0C,IAAV,CAAeD,UAFtB;AAGjBb,EAAAA,mBAAmB,EAAE5B,SAAS,CAAC0C,IAAV,CAAeD,UAHnB;AAIjBP,EAAAA,SAAS,EAAElC,SAAS,CAAC2C,MAAV,CAAiBF,UAJX;AAKjBN,EAAAA,gBAAgB,EAAEnC,SAAS,CAACuC,OAAV,CAAkBvC,SAAS,CAAC2C,MAA5B,EAAoCF;AALrC,CAAnB;;AAQA,MAAMG,eAAe,GAAI7B,KAAD,KAAY;AAClCmB,EAAAA,SAAS,EAAEnB,KAAK,CAAC8B,IAAN,CAAWC,KADY;AAElCX,EAAAA,gBAAgB,EAAEpB,KAAK,CAACgC,MAAN,CAAaC,UAFG;AAGlCrB,EAAAA,QAAQ,EAAEZ,KAAK,CAACgC,MAAN,CAAapB;AAHW,CAAZ,CAAxB;;AAMA,MAAMsB,kBAAkB,GAAIC,QAAD,KAAe;AACxC5B,EAAAA,sBAAsB,EAAE,MAAM4B,QAAQ,CAAChD,eAAe,EAAhB,CADE;AAExC0B,EAAAA,mBAAmB,EAAGD,QAAD,IAAcuB,QAAQ,CAAC/C,gBAAgB,CAACwB,QAAD,CAAjB;AAFH,CAAf,CAA3B;;AAKA,eAAe1B,OAAO,CAAC2C,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CvC,MAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, sendExpensesInfo } from '../actions';\nimport Input from '../components/Input';\nimport Select from '../components/Select';\nimport { payMethods, tags } from '../helpers';\nimport getCurrencyInfo from '../services/currencyAPI';\nimport Header from '../components/Header';\n\nclass Wallet extends Component {\n  constructor() {\n    super();\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n\n    this.state = {\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n    };\n  }\n\n  componentDidMount() {\n    const { fetchCurrenciesToProps } = this.props;\n    fetchCurrenciesToProps();\n  }\n\n  handleInputChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async handleButtonClick() {\n    const { expenses, sendExpensesToProps } = this.props;\n    const response = await getCurrencyInfo();\n    sendExpensesToProps({ id: expenses.length, ...this.state, exchangeRates: response });\n  }\n\n  render() {\n    const { props: { userEmail, walletCurrencies, expenses }, state: {\n      value, description, currency, method, tag },\n    handleInputChange, handleButtonClick } = this;\n    return (\n      <section className=\"w- bg-gradient-to-t from-gray-200 via-gray-100 to-gray-50\">\n        <Header userEmail={ userEmail } expenses={ expenses } />\n        <form>\n          <Input\n            type=\"text\"\n            name=\"value\"\n            value={ value }\n            onChange={ handleInputChange }\n          />\n          <Input\n            type=\"text\"\n            name=\"description\"\n            value={ description }\n            onChange={ handleInputChange }\n          />\n          <Select\n            name=\"currency\"\n            value={ currency }\n            options={ walletCurrencies.filter((optCurrency) => optCurrency !== 'USDT') }\n            onChange={ handleInputChange }\n          />\n          <Select\n            name=\"method\"\n            value={ method }\n            options={ payMethods }\n            onChange={ handleInputChange }\n          />\n          <Select\n            name=\"tag\"\n            value={ tag }\n            options={ tags }\n            onChange={ handleInputChange }\n          />\n          <button name=\"adicionar despesa\" type=\"button\" onClick={ handleButtonClick }>\n            Adicionar despesa\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nWallet.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fetchCurrenciesToProps: PropTypes.func.isRequired,\n  sendExpensesToProps: PropTypes.func.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  walletCurrencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  walletCurrencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrenciesToProps: () => dispatch(fetchCurrencies()),\n  sendExpensesToProps: (expenses) => dispatch(sendExpensesInfo(expenses)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n"]},"metadata":{},"sourceType":"module"}